from telegram import Update
from telegram.ext import ContextTypes

from config import ADMIN_ID
from services.storage import load_knowledge_from_excel, rebuild_question_maps, EXCEL_FILE, knowledge_base, attachments_map
from services.users import user_ids
from services.stats import usage_stats

async def reload_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        global knowledge_base, attachments_map
        knowledge_base, attachments_map = load_knowledge_from_excel(EXCEL_FILE)
        rebuild_question_maps()
        await update.message.reply_text("üîÑ Excel –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    if not usage_stats:
        return await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    result = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" + "\n".join([f"{q} ‚Äî {c} —Ä–∞–∑(–∞)" for q, c in usage_stats.items()])
    await update.message.reply_text(result)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    context.user_data["awaiting_broadcast"] = True
    await update.message.reply_text("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")

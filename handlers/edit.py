from telegram import Update
from telegram.ext import ContextTypes

from config import ADMIN_ID
from services.storage import knowledge_base, save_knowledge_to_excel, rebuild_question_maps

async def add_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    context.user_data['edit_mode'] = 'add'
    await update.message.reply_text("‚ûï –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å:")

async def edit_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    context.user_data['edit_mode'] = 'edit'
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")

async def delete_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    context.user_data['edit_mode'] = 'delete'
    await update.message.reply_text("üóë –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")

async def handle_edit_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get('edit_mode')

    if mode == 'add':
        if 'new_section' not in context.user_data:
            context.user_data['new_section'] = update.message.text.strip()
            await update.message.reply_text("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
        elif 'new_question' not in context.user_data:
            context.user_data['new_question'] = update.message.text.strip()
            await update.message.reply_text("üìã –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:")
        elif 'new_answer' not in context.user_data:
            context.user_data['new_answer'] = update.message.text.strip()
            section = context.user_data['new_section']
            question = context.user_data['new_question']
            answer = context.user_data['new_answer']
            if section not in knowledge_base:
                knowledge_base[section] = []
            knowledge_base[section].append({"Question": question, "answer": answer})
            save_knowledge_to_excel()
            rebuild_question_maps()
            context.user_data.clear()
            await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.")

    elif mode == 'edit':
        if 'edit_target' not in context.user_data:
            question = update.message.text.strip()
            context.user_data['edit_target'] = question
            found = False
            for section, qas in knowledge_base.items():
                for qa in qas:
                    if qa["Question"] == question:
                        found = True
                        break
            if not found:
                context.user_data.clear()
                return await update.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:")
        else:
            new_answer = update.message.text.strip()
            target = context.user_data['edit_target']
            for section, qas in knowledge_base.items():
                for qa in qas:
                    if qa["Question"] == target:
                        qa["answer"] = new_answer
            save_knowledge_to_excel()
            rebuild_question_maps()
            context.user_data.clear()
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")

    elif mode == 'delete':
        target = update.message.text.strip()
        removed = False
        for section in list(knowledge_base.keys()):
            qas = knowledge_base[section]
            filtered = [qa for qa in qas if qa["Question"] != target]
            if len(filtered) != len(qas):
                knowledge_base[section] = filtered
                removed = True
        if removed:
            save_knowledge_to_excel()
            rebuild_question_maps()
            await update.message.reply_text("üóë –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω.")
        else:
            await update.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        context.user_data.clear()

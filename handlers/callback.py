
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes

from handlers.start import start
from services.storage import knowledge_base, question_id_map, reverse_id_map, attachments_map
from services.stats import usage_stats

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("section|"):
        section = data.split("|")[1]
        questions = knowledge_base.get(section, [])
        keyboard = [
            [InlineKeyboardButton(text=qa["Question"], callback_data=f"question|{reverse_id_map[qa['Question']]}")]
            for qa in questions
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="back_to_sections")])
        await query.edit_message_text(
            text=f"üìö *{section}*–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )

    elif data.startswith("question|"):
        qid = data.split("|")[1]
        qa = question_id_map.get(qid)
        if not qa:
            await query.message.reply_text("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        try:
            await query.message.delete()
        except:
            pass
        await query.message.chat.send_message(
            text=f"üìå *{qa['question']}*{qa['answer']}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–¥–µ–ª—É", callback_data=f"section|{qa['section']}")]
            ])
        )

        if qa["question"] in attachments_map:
            path = attachments_map[qa["question"]]
            if os.path.exists(path):
                filename = os.path.basename(path)
                try:
                    with open(path, "rb") as f:
                        await query.message.chat.send_document(document=f, filename=filename)
                except Exception as e:
                    await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

        usage_stats[qa["question"]] = usage_stats.get(qa["question"], 0) + 1

    elif data == "back_to_sections":
        await start(update, context)

    elif data == "ask_direct":
        context.user_data["awaiting_user_question"] = True
        await query.edit_message_text(
            "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. "
            "–û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ.",
        )
